// Generated by LiveScript 1.5.0
(function(){
  var request, crypto, _, utf8;
  request = require('request');
  crypto = require('crypto');
  _ = require('lodash');
  utf8 = require('utf8');
  module.exports = function(merchant_account, merchant_password){
    var PURCHASE_URL, API_URL, WIDGET_URL, FIELDS_DELIMITER, API_VERSION, DEFAULT_CHARSET, MODE_PURCHASE, MODE_SETTLE, MODE_CHARGE, MODE_REFUND, MODE_CHECK_STATUS, MODE_P2P_CREDIT, MODE_CREATE_INVOICE, MODE_P2_PHONE, COMPLETE_3DS, serialize, array_key_exists;
    console.log('wayforpay');
    PURCHASE_URL = 'https://secure.wayforpay.com/pay';
    API_URL = 'https://api.wayforpay.com/api';
    WIDGET_URL = 'https://secure.wayforpay.com/server/pay-widget.js';
    FIELDS_DELIMITER = ';';
    API_VERSION = 1;
    DEFAULT_CHARSET = 'utf8';
    MODE_PURCHASE = 'PURCHASE';
    MODE_SETTLE = 'SETTLE';
    MODE_CHARGE = 'CHARGE';
    MODE_REFUND = 'REFUND';
    MODE_CHECK_STATUS = 'CHECK_STATUS';
    MODE_P2P_CREDIT = 'P2P_CREDIT';
    MODE_CREATE_INVOICE = 'CREATE_INVOICE';
    MODE_P2_PHONE = 'P2_PHONE';
    COMPLETE_3DS = 'COMPLETE_3DS';
    this._action;
    this._fields;
    this._charset;
    this._query = function(call){
      var data;
      console.log('_query');
      data = JSON.stringify(this._fields);
      request.put({
        url: API_URL,
        body: data,
        headers: {
          'Content-Type': 'application/json; charset=utf-8'
        }
      }, function(error, response, body){
        if (!error && response.statusCode === 200) {
          call(body);
        } else {
          call(body);
        }
      });
    };
    this.createSignature = function(action, fields){
      this._prepare(action, fields);
      return this._buildSignature();
    };
    this._prepare = function(action, fields){
      console.log('_prepare');
      this._action = action;
      if (_.isEmpty(fields)) {
        throw new Error('Arguments must be not empty');
      }
      this._fields = fields;
      this._fields.transactionType = action;
      this._fields.merchantAccount = merchant_account;
      this._fields.merchantSignature = this._buildSignature();
      if (this._action !== MODE_PURCHASE) {
        this._fields.apiVersion = API_VERSION;
      }
      this._checkFields();
    };
    this.settle = function(fields, cb){
      this._prepare(MODE_SETTLE, fields);
      return this._query(cb);
    };
    this.charge = function(fields, cb){
      this._prepare(MODE_CHARGE, fields);
      return this._query(cb);
    };
    this.refund = function(fields, cb){
      this._prepare(MODE_REFUND, fields);
      return this._query(cb);
    };
    this.checkStatus = function(fields, cb){
      this._prepare(MODE_CHECK_STATUS, fields);
      return this._query(cb);
    };
    this.complete3ds = function(fields, cb){
      this._prepare(COMPLETE_3DS, fields);
      return this._query(cb);
    };
    this.account2card = function(fields, cb){
      this._prepare(MODE_P2P_CREDIT, fields);
      return this._query(cb);
    };
    this.createInvoice = function(fields, cb){
      this._prepare(MODE_CREATE_INVOICE, fields);
      return this._query(cb);
    };
    this.account2phone = function(fields, cb){
      this._prepare(MODE_P2_PHONE, fields);
      return this._query(cb);
    };
    this.buildForm = function(fields){
      var form;
      this._prepare(MODE_PURCHASE, fields);
      form = '<form method="POST" action="' + PURCHASE_URL + '" accept-charset="utf-8">';
      _.each(fields, function(value, key){
        if (_.isArray(key)) {
          _.each(key, function(fild){
            form += '<input type="hidden" name="' + key + '[]" value="' + fild + '" />';
          });
        } else {
          form += '<input type="hidden" name="' + key + '" value="' + value + '" />';
        }
      });
      form += '<input type="submit" value="Submit purchase form"></form>';
      return form;
    };
    this.generatePurchaseUrl = function(fields){
      this._prepare(MODE_PURCHASE, fields);
      return PURCHASE_URL + '/get?' + serialize(fields);
    };
    this._getFieldsNameForSignature = function(){
      var purchaseFieldsAlias;
      console.log('_getFieldsNameForSignature');
      purchaseFieldsAlias = ['merchantAccount', 'merchantDomainName', 'orderReference', 'orderDate', 'amount', 'currency', 'productName', 'productCount', 'productPrice', 'clientPhone', 'clientEmail'];
      switch (this._action) {
      case 'COMPLETE_3DS':
        return ['transactionType', 'authorization_ticket', 'd3ds_pares'];
      case 'ACCEPT':
        return ['orderReference', 'status', 'time'];
      case 'PURCHASE':
        return purchaseFieldsAlias;
      case 'REFUND':
        return ['merchantAccount', 'orderReference', 'amount', 'currency'];
      case 'CHECK_STATUS':
        return ['merchantAccount', 'orderReference'];
      case 'CHARGE':
        return purchaseFieldsAlias;
      case 'SETTLE':
        return ['merchantAccount', 'orderReference', 'amount', 'currency'];
      case MODE_P2P_CREDIT:
        return ['merchantAccount', 'orderReference', 'amount', 'currency', 'cardBeneficiary', 'rec2Token'];
      case MODE_CREATE_INVOICE:
        return purchaseFieldsAlias;
      case MODE_P2_PHONE:
        return ['merchantAccount', 'orderReference', 'amount', 'currency', 'phone'];
      default:
        throw new Error('Unknown transaction type: ' + this._action);
      }
    };
    this._checkFields = function(){
      var required, error, parameters;
      console.log('_checkFields');
      required = this._getRequiredFields;
      error = [];
      parameters = this._fields;
      _(required).forEach(function(item){
        if (array_key_exists(item, parameters)) {
          if (!parameters[item]) {
            error.push(item);
          }
        } else {
          error.push(item);
        }
      });
      if (!_.isEmpty(error)) {
        throw new Error('Missed required field(s): ' + JSON.stringify(error));
      }
      return true;
    };
    this._buildSignature = function(){
      var signFields, data, error, parameters, arrParam, secret, buffer, hash;
      console.log('_buildSignature');
      signFields = this._getFieldsNameForSignature();
      data = [];
      error = [];
      parameters = this._fields;
      _(signFields).forEach(function(item){
        var value, arrParam, str;
        if (array_key_exists(item, parameters)) {
          value = parameters[item];
          if (_.isArray(value)) {
            arrParam = _.values(value);
            str = arrParam.join(FIELDS_DELIMITER);
            data.push(str + '');
          } else {
            data.push(value + '');
          }
        } else {
          error.push(item);
        }
      });
      if (!_.isEmpty(error)) {
        throw new Error('Missed signature field(s): ' + JSON.stringify(error));
      }
      arrParam = _.values(data);
      secret = arrParam.join(FIELDS_DELIMITER);
      buffer = utf8.encode(secret);
      hash = crypto.createHmac('md5', merchant_password).update(buffer).digest('hex');
      return hash;
    };
    this._getRequiredFields = function(){
      var required, additional;
      switch (this._action) {
      case 'PURCHASE':
        return ['merchantAccount', 'merchantDomainName', 'merchantTransactionSecureType', 'orderReference', 'orderDate', 'amount', 'currency', 'productName', 'productCount', 'productPrice'];
      case 'SETTLE':
        return ['transactionType', 'merchantAccount', 'orderReference', 'amount', 'currency', 'apiVersion'];
      case 'ACCEPT':
        return ['orderReference', 'status', 'time'];
      case 'CHARGE':
        required = ['transactionType', 'merchantAccount', 'merchantDomainName', 'orderReference', 'apiVersion', 'orderDate', 'amount', 'currency', 'productName', 'productCount', 'productPrice'];
        additional = this._fields['recToken']
          ? ['recToken']
          : ['card', 'expMonth', 'expYear', 'cardCvv', 'cardHolder'];
        return required.concat(additional).unique();
      case 'REFUND':
        return ['transactionType', 'merchantAccount', 'orderReference', 'amount', 'currency', 'comment', 'apiVersion'];
      case 'CHECK_STATUS':
        return ['transactionType', 'merchantAccount', 'orderReference', 'apiVersion'];
      case 'COMPLETE_3DS':
        return ['transactionType', 'authorization_ticket', 'd3ds_pares'];
      case MODE_P2P_CREDIT:
        return ['transactionType', 'merchantAccount', 'orderReference', 'amount', 'currency', 'cardBeneficiary', 'merchantSignature'];
      case MODE_CREATE_INVOICE:
        return ['transactionType', 'merchantAccount', 'merchantDomainName', 'orderReference', 'amount', 'currency', 'productName', 'productCount', 'productPrice'];
      case MODE_P2_PHONE:
        return ['merchantAccount', 'orderReference', 'orderDate', 'currency', 'amount', 'phone', 'apiVersion'];
      default:
        throw new Error('Unknown transaction type');
      }
    };
    this.buildWidgetButton = function(fields, callback){
      var button;
      callback == null && (callback = null);
      this._prepare(MODE_PURCHASE, fields);
      button = '<script id="widget-wfp-script" language="javascript" type="text/javascript" src="' + WIDGET_URL + '"></script>';
      button += '<script type="text/javascript">';
      button += 'var wayforpay = new Wayforpay();';
      button += 'var pay = function () {';
      button += '    wayforpay.run(' + JSON.stringify(this._fields) + ');';
      button += '}';
      button += 'window.addEventListener("message", ' + (callback ? callback : 'receiveMessage') + ');';
      button += 'function receiveMessage(event)';
      button += '{';
      button += '    if(';
      button += '        event.data == "WfpWidgetEventClose" ||      //при закрытии виджета пользователем';
      button += '        event.data == "WfpWidgetEventApproved" ||   //при успешном завершении операции';
      button += '        event.data == "WfpWidgetEventDeclined" ||   //при неуспешном завершении';
      button += '        event.data == "WfpWidgetEventPending")      // транзакция на обработке';
      button += '    {';
      button += '        console.log(event.data);';
      button += '    }';
      button += '}';
      button += '</script>';
      button += '<button type="button" onclick="pay();">Оплатить</button>';
      return button;
    };
    serialize = function(obj){
      var str, p;
      str = [];
      for (p in obj) {
        if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
        }
      }
      return str.join('&');
    };
    array_key_exists = function(key, search){
      if (!search || search.constructor !== Array && search.constructor !== Object) {
        return false;
      }
      return search[key] !== undefined;
    };
    return this;
  };
}).call(this);
